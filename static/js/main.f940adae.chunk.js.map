{"version":3,"sources":["components/navbar.component.js","components/dashboard.component.js","components/mapa.component.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Component","DashboardComponent","props","state","dato","listaDeDatos","handleclickbutton","bind","handlechangeinputtext","evt","target","name","this","setState","value","socket","emit","from","data","io","on","htmlFor","type","id","onChange","onClick","map","obj","idx","key","MapaComponent","unidades","rutas","idRuta","showingInfoWindow","activeMarker","selectedPlace","timer","onMarkerClick","onMapClicked","onInfoWindowClose","marker","e","style","height","google","zoom","initialCenter","lat","lng","visible","GoogleApiWrapper","apiKey","App","path","exact","component","Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f940adae.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Navbar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\r\n                <Link to=\"/\" className=\"navbar-brand\">Dashboard</Link>\r\n                <div className=\"collpase navbar-collapse\">\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"navbar-item\">\r\n                            <Link to=\"/historial\" className=\"nav-link\">Historial</Link>\r\n                        </li>\r\n                        <li className=\"navbar-item\">\r\n                            <Link to=\"/mapa\" className=\"nav-link\">Mapa</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nclass DashboardComponent extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            dato: '',\r\n            listaDeDatos: [],\r\n        };\r\n\r\n        this.handleclickbutton = this.handleclickbutton.bind(this);\r\n        this.handlechangeinputtext = this.handlechangeinputtext.bind(this);\r\n    }\r\n\r\n    handlechangeinputtext(evt){\r\n        switch (evt.target.name) {\r\n            case \"dato\":\r\n                this.setState({\r\n                    dato: evt.target.value,\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleclickbutton(evt){\r\n        switch (evt.target.name) {\r\n            case \"enviar\":\r\n                this.socket.emit('dato', {from: 'web', data:this.state.dato});\r\n                break;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.socket = io('http://localhost:3000');\r\n        this.socket.on('datogeneral', data => {\r\n            this.setState({\r\n                listaDeDatos: [data, ...this.state.listaDeDatos],\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main row mt-3\">\r\n                <div className=\"col-12\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-4\">\r\n                            Main Page With Socket\r\n                            <div className=\"form-row\">\r\n                                <label htmlFor=\"dato\" className=\"col-3 col-form-label\">DATO:</label>\r\n                                <input type=\"text\" name=\"dato\" id=\"dato\" className=\"form-control col-5\" onChange={this.handlechangeinputtext}/>\r\n                            </div>\r\n                            <div className=\"form-row\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    name=\"enviar\"\r\n                                    className=\"btn btn-success\"\r\n                                    onClick={this.handleclickbutton}\r\n                                >\r\n                                    ENVIAR\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-5\">\r\n                            <ul>\r\n                                {\r\n                                    this.state.listaDeDatos.map((obj, idx) => {\r\n                                        return (\r\n                                            <li key={idx}>\r\n                                                <strong>{obj.from}:</strong>{obj.data}\r\n                                            </li>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashboardComponent;","import React, {Component} from 'react';\r\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\r\n\r\nclass MapaComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            unidades: [],\r\n            rutas: [],\r\n            idRuta: '0',\r\n\r\n            showingInfoWindow: false,\r\n            activeMarker: {},\r\n            selectedPlace: {},\r\n\r\n            timer: null,\r\n        };\r\n\r\n        this.onMarkerClick = this.onMarkerClick.bind(this);\r\n        this.onMapClicked = this.onMapClicked.bind(this);\r\n        this.onInfoWindowClose = this.onInfoWindowClose.bind(this);\r\n    }\r\n\r\n    onMarkerClick(props, marker, e){\r\n        this.setState({\r\n            selectedPlace: props,\r\n            activeMarker: marker,\r\n            showingInfoWindow: true\r\n        });\r\n    }\r\n\r\n    onMapClicked(props){\r\n        if (this.state.showingInfoWindow) {\r\n            this.setState({\r\n                showingInfoWindow: false,\r\n                activeMarker: null\r\n            })\r\n        }\r\n    };\r\n\r\n    onInfoWindowClose(){\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main row justify-content-center mt-3\">\r\n                <div className=\"col-10\" style={{height: \"600px\"}}>\r\n                    <Map\r\n                        google={this.props.google}\r\n                        zoom={14}\r\n                        initialCenter={{\r\n                            lat: -16.441084,\r\n                            lng: -71.529211,\r\n                        }}\r\n                    >\r\n                        {/*\r\n                            this.state.unidades.map((elemento, index) => {\r\n                                return (\r\n                                    <Marker\r\n                                        key={index}\r\n                                        onClick={this.onMarkerClick}\r\n                                        title={'The marker`s title will appear as a tooltip.'}\r\n                                        name={elemento.descripcion}\r\n                                        position={{lat: elemento.lat, lng: elemento.lng}}\r\n                                        icon={{\r\n                                            url: \"/favicon.ico\",\r\n                                            anchor: new google.maps.Point(32,32),\r\n                                            scaledSize: new google.maps.Size(32,32)\r\n                                        }}\r\n                                    />\r\n                                );\r\n                            })*/\r\n                        }\r\n\r\n                        <InfoWindow\r\n                            marker={this.state.activeMarker}\r\n                            visible={this.state.showingInfoWindow}>\r\n                            <div>\r\n                                <h1>{this.state.selectedPlace.name}</h1>\r\n                            </div>\r\n                        </InfoWindow>\r\n                    </Map>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: (\"AIzaSyDuXDID0Yxm6vW2TNZs6IftRLsYGJ_NWiQ\")\r\n})(MapaComponent);","import React from 'react';\r\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Navbar from \"./components/navbar.component\";\r\nimport Dashboard from \"./components/dashboard.component\";\r\nimport MapaComponent from \"./components/mapa.component\";\r\n\r\nfunction App() {\r\n  return (\r\n      <Router>\r\n          <div className=\"container\">\r\n              <Navbar />\r\n              <Route path=\"/\" exact component={Dashboard} />\r\n              <Route path=\"/mapa\" exact component={MapaComponent} />\r\n          </div>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}